git config --global user.name blabla - введення глобального імені
git config --global user.email blabal@bla - введеня імейлу(зареєстрованого на Гіт Хабі)


git init - ініціація Гіт в папці (локальному репозиторії)
git status - перевірка статусу , які є файли в папці, чи є зміни в очікуванні
ls - відображає список файлів в репозиторії


git diff - показує внесені зміни в файлах, що ще не проіндексовані
git add .- індексує зміни , що очікують на коміт 
git diff --staged - показує різницю між проіндексованою і останньою збереженою версією файлів
git commit - підтверджує внесені зміни

git reset [коммит] - відміняє всі комміти після вказаного, залишає зміни в робочій дерикторії

git log - історія коммітів для поточної гілки
git log --follow [файл] - історія змін конкретного файлу, включно з його перейменуванням
git diff [назва першої гілки]...[назва іншої гілки] - показує різницю між змістом коміттів двох гілок

git reset [файл] - відміняє індиксацію файла (git add .), але не видаляє внесені зміни


git checkout (назва гілки) - переходить в нову бранчу (гілку)
git branch - список гілок (бранчів)
git branch (назва нової гілки) - створює нову гілку 
git branch -d (назва гілки) - видаляє вказану гілку


git fetch [ урл віддаленого репозиторія] - завантажує всі зміни що були в віддаленому репозиторії
git push - загружає зміни з локального репозиторію на віддалений
git pull - завантажує зміни з віддаленого репозиторії на локальний
git merge - з"єднує дві гілки , завантажує зміни з гілки віддаленого репозиторію, в поточну гілку локального

git clone - завантажує віддалений репозиторій разом зі всіма змінами


git revert - по суті є git cherry-pick навиворіт. Вона створює новий коміт, який застосовує точну протилежність впроваджених цільовим комітом змін, по суті скасовуючи чи вивертаючи їх
git reset (коміт) - відміняє внесені зміни від вказаного коміту, але зберігає зміни в робочій діректорії($ git reset --hard [коммит] - видаляє всю історію разом зі станом робочої директорії до вказаного коміту )
git rebase - загалом є автоматизованим cherry-pick. Вона визначає послідовність комітів, а потім висмикує їх один за одним у тому ж порядку звідкілясь.
git cherry-pick - використовується, щоб взяти впроваджені в одному коміті Git зміни, та спробувати застосувати їх як новий коміт на поточній гілці. Це може бути корисним лише щоб взяти один чи два коміти з гілки окремо замість зливання гілки, що призведе до надбання всіх змін з неї.


git stash - тимчасово зберігає всі незафіксовані зміни
git stash list - виводить список всіх тимчасових збережень
git stash pop - відновлює стан попередньо збережених версій файлів
git stash drop - відміняє всі останні тимчасово збережені зміни

.gitignore файл - файл де мають бути вказані всі файли і директорії, які гіт буде ігнорувати


